import Head from 'next/head'
import { useRouter } from 'next/router'
import Image from 'next/image'
import { useDispatch, useSelector } from 'react-redux'
import { RootState } from '@state/store'
import { Card } from '@components/Card/Card'
import { Content } from '@styles/common.style'
import { ProgressBar } from '@components/ProgressBar/ProgressBar'
import { Button } from '@components/Button/Button'
import { actionsConfig, journeyTypes } from '@utils/constants'
import { useState } from 'react'
import { ActionHeader } from '@components/ActionHeader/ActionHeader'
import { SwitchingColumnContainer, SwitchingColumn } from '@modules/Switching/Switching.style'
import * as S from '@modules/Switching/PreSwitching.style'
import { setActionCard } from '@state/switchingJourney/switchingJourneySlice'

type ActionsConfig = typeof actionsConfig[0]

const SelectAction = (): JSX.Element => {
  const { push } = useRouter()
  const dispatch = useDispatch()
  const stepsCompleted = useSelector((state: RootState) => state.user.switchingJourneys.personal)
  const journeyType = useSelector((state: RootState) => state.switchingJourney.journeyType)
  const [selectedRoute, setRoute] = useState(actionsConfig[0].route)
  const [currentAction, setAction] = useState<ActionsConfig | null>(null)
  const filterActionType = ({ type }: { type: string }) =>
    journeyType === journeyTypes.noBankAccount
      ? type !== 'breakup' && type !== 'reviews'
      : journeyType === journeyTypes.notReadyToSwitch
      ? type !== 'hello'
      : true

  const selectAction = (index: number) => () => {
    setRoute(actionsConfig[index].route)
    setAction(actionsConfig[index])
    dispatch(setActionCard(index))
  }

  return (
    <>
      <Head>
        <title>SwitchIt</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
      </Head>

      <Content>
        <SwitchingColumnContainer>
          <SwitchingColumn>
            <Card column padded>
              <ActionHeader
                header={`Let's design your switching journey, and maximise your impact`}
                subHeader={`Select which of the following actions you'd like to take. The more actions completed, the bigger the impact.`}
              />

              <S.Section>
                <S.ActionSelector>
                  {actionsConfig
                    .filter(filterActionType)
                    .map(({ text, icon, duration, pointsEarned, route }, i: number) => (
                      <S.Item
                        key={route}
                        isActive={icon === currentAction?.icon}
                        isCompleted={stepsCompleted.includes(i)}
                      >
                        <S.LinkContainer onClick={selectAction(i)}>
                          <Image src={`/icons/icon_${icon}.svg`} alt='' width={70} height={70} />
                          <h3>{text}</h3>
                          <S.MetaData>
                            <span>{duration}min</span>
                            <span>{pointsEarned}pts</span>
                          </S.MetaData>
                        </S.LinkContainer>
                      </S.Item>
                    ))}
                </S.ActionSelector>
              </S.Section>

              <S.Section>
                <S.ButtonContainer>
                  <Button
                    type='button'
                    disabled={!currentAction}
                    onClick={() => {
                      // push(selectedRoute)
                      push('/switching/start-journey')
                    }}
                  >
                    Next
                  </Button>
                </S.ButtonContainer>
                <ProgressBar step={4} />
              </S.Section>
            </Card>
          </SwitchingColumn>
        </SwitchingColumnContainer>
      </Content>
    </>
  )
}

export default SelectAction
