import { useState } from 'react'
import type { NextPage } from 'next'
import Head from 'next/head'
import { useRouter } from 'next/router'
import { Button } from '@components/Button/Button'
import { Select } from '@components/Select/Select'
import { Card } from '@components/Card/Card'
import { Input } from '@components/Input/Input.style'
import { countries } from '@utils/countries'
import { ActionHeader } from '@components/ActionHeader/ActionHeader'
import { Buttons } from '@modules/Switching/Switching.style'
import { fetcher } from '@utils/functions'
import { useToast } from '@hooks/useToast'
import { Form, Content, NarrowContent } from '@styles/common.style'
import * as S from '@modules/Switching/Switching.style'

type NotListedBank = {
  value: string
  country: string
}

type Sort = { label: string }

export const BankNotListed: NextPage = () => {
  const { push } = useRouter()
  const toast = useToast()
  const [country, setCountry] = useState('')
  const [isConfirmation, setConfirmation] = useState(false)
  const [value, setValue] = useState('')
  const sortSelect = ({ label: a }: Sort, { label: b }: Sort) => (a < b ? -1 : a > b ? 1 : 0)
  const header = isConfirmation ? 'Thanks for letting us know!' : 'Help Us Help You!'
  const subHeader = isConfirmation
    ? ''
    : `Looks like we haven't gotten to your bank yet but we're always digging into new providers.
Submit your bank below and we'll reach out when we've got the data.`

  const onSelectCountry = (value: string) => {
    setCountry(value)
  }

  const saveNotListedBank = async (notListedBank: NotListedBank) => {
    try {
      const body = {
        filter: {},
        payload: { $push: { [`banksNotListed`]: notListedBank } },
        collection: 'banksNotListed',
        upsert: false,
      }

      await fetcher(`/api/db/updateOne`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(body),
      })
    } catch (error) {
      toast('An error occurred submitting your bank', 'error')
    }
  }

  const onSubmit = (): void => {
    setConfirmation(true)
    saveNotListedBank({ value, country })
  }

  const resetForm = (): void => {
    setConfirmation(false)
    setValue('')
    setCountry('')
  }

  return (
    <>
      <Head>
        <title>SwitchIt</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
      </Head>

      <Content>
        <S.SwitchingColumnContainer>
          <S.SwitchingColumn>
            <Card column padded>
              <ActionHeader header={header} subHeader={subHeader} />
              <NarrowContent>
                {isConfirmation ? (
                  <>
                    <p>
                      {`Though we haven't gotten to your bank yet, we still recommend switching.
                      Here's why: If we don't have information on your bank yet, that probably means
                      they don't have any environmental policy. That means we automatically score
                      your bank 3/5.`}
                    </p>
                    <p>
                      If they {`don't`} have one at all. Why risk it when you know you could be
                      doing good.
                    </p>
                    <Buttons>
                      <Button type='button' onClick={() => push('/switching/green-banks')}>
                        Show Me Green Banks
                      </Button>
                    </Buttons>
                  </>
                ) : (
                  <Form>
                    <fieldset>
                      <label htmlFor='bankName'>
                        Bank
                        <Input
                          id='bankName'
                          name='bankName'
                          value={value}
                          onChange={e => setValue(e.target.value)}
                        />
                      </label>
                      <label>
                        Country
                        <Select
                          name='countries'
                          defaultValue={{ value: '', label: 'Select country' }}
                          options={countries.sort(sortSelect)}
                          onChange={onSelectCountry}
                        />
                      </label>
                    </fieldset>
                    <Buttons>
                      <Button type='button' mode='secondary' onClick={resetForm}>
                        Cancel
                      </Button>
                      <Button type='button' disabled={!value || !country} onClick={onSubmit}>
                        Submit
                      </Button>
                    </Buttons>
                  </Form>
                )}
              </NarrowContent>
            </Card>
          </S.SwitchingColumn>
        </S.SwitchingColumnContainer>
      </Content>
    </>
  )
}
